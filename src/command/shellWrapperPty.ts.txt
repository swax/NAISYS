/**
 * A version of the shell wrapper that uses pty to create an 'interactive' shell.
 * Haven't gotten it to work yet, but it's a good reference for how to use pty.
 * A command like `rm -i file` will prompt the user for confirmation, but only works correctly 
 * in an interactive shell.
 * 
 * Unlike pipe where std in/out are separated, with pty they are combined in the output so 
 * it's hard to parse out just the output. Also the dependencies on node-pty require c++ build tools
 * and the full windows sdk for windows at least, so it's not as portable as the child_process module.
 * 
 * The entire context could be rethought to make this work by using the full terminal output as the context 
 * itself so parsing in from out isn't necessary.
 */

import { ChildProcessWithoutNullStreams, spawn } from "child_process";
import * as fs from "fs";
import * as os from "os";
import stripAnsi from "strip-ansi";
import * as config from "../config.js";
import * as output from "../utils/output.js";
import * as pathService from "../services/pathService.js";
import { NaisysPath } from "../services/pathService.js";
import xterm from "@xterm/headless";
import * as pty from "node-pty";

enum ShellEvent {
  Ouptput = "stdout",
  Error = "stderr",
  Exit = "exit",
}

let _childProcess: ChildProcessWithoutNullStreams | undefined;
let _currentProcessId: number | undefined;

let _commandOutput = "";
let _currentPath: string | undefined;

/**
 * Use xterm to interpret command codes in the shell output.
 * For example a command like `top` uses command codes to constantly update the output buffer
 */
const _useTerminal = true;
let _terminal: xterm.Terminal | undefined;

/**
 * Use pty to create an 'interactive' shell. For example a command like `rm -i` will prompt the user for input
 * without running it in an interactive shell, the command will not wait for input
 */
const _usePty = true;
let _ptyProcess: pty.IPty | undefined;
let _ptyRemoveListeners: (() => void) | undefined;

let _resolveCurrentCommand: ((value: string) => void) | undefined;
let _currentCommandTimeout: NodeJS.Timeout | undefined;

/** How we know the command has completed when running the command inside a shell like bash or wsl */
const _startCommandDelimiter = "__COMMAND_START_JPP2XO__";
const _endCommandDelimiter = "__COMMAND_END_X7YUTT__";
let _outputStarted = false;

let _wrapperSuspended = false;

const _queuedOutput: {
  rawDataStr: string;
  eventType: ShellEvent;
  pid: number;
}[] = [];

async function ensureOpen() {
  if (_childProcess || _ptyProcess) {
    return;
  }

  resetCommand();

  if (_useTerminal) {
    _terminal = new xterm.Terminal({
      allowProposedApi: true,
    });
  }

  _currentProcessId = startProcess();

  // Init users home dir on first run, on shell crash/rerun go back to the current path
  if (!_currentPath) {
    output.comment("NEW SHELL OPENED. PID: " + _currentProcessId);

    errorIfNotEmpty(
      await executeCommand(
        `mkdir -p ${config.naisysFolder}/home/` + config.agent.username
      )
    );
    errorIfNotEmpty(
      await executeCommand(
        `cd ${config.naisysFolder}/home/` + config.agent.username
      )
    );
  } else {
    output.comment("SHELL RESTORED. PID: " + _currentProcessId);

    errorIfNotEmpty(await executeCommand("cd " + _currentPath));
  }

  // Stop running commands if one fails
  // Often the LLM will give us back all kinds of invalid commands, we want to break on the first one
  // Unfortunately this also causes the shell to exit on failures, so we need to handle that
  //commentIfNotEmpty(await executeCommand("set -e"));
}

function startProcess() {
  /** Define locally so closures fire events tagged with the pid from the process from which they were created */
  let pid: number;

  if (_usePty) {
    const shell = os.platform() === "win32" ? "powershell.exe" : "bash";

    _ptyProcess = pty.spawn(shell, ["wsl"], {
      name: "xterm-color",
      cols: process.stdout.columns,
      rows: process.stdout.rows,
      env: process.env, // Not sure if this is necessary
    });

    pid = _ptyProcess.pid;

    _ptyProcess.clear();

    const onDataEvent = _ptyProcess.onData((data) => {
      processOutput(data, ShellEvent.Ouptput, pid);
    });

    const onExitEvent = _ptyProcess.onExit((code) => {
      processOutput(code.exitCode.toString(), ShellEvent.Exit, pid);
    });

    _ptyRemoveListeners = () => {
      onDataEvent.dispose();
      onExitEvent.dispose();
    };
  } else {
    const command = os.platform() === "win32" ? "wsl" : "bash";

    _childProcess = spawn(command, [], { stdio: "pipe" });

    if (!_childProcess || !_childProcess.pid) {
      throw "Shell process failed to start";
    }

    pid = _childProcess.pid;

    _childProcess.stdout.on("data", (data) => {
      processOutput(data.toString(), ShellEvent.Ouptput, pid);
    });

    _childProcess.stderr.on("data", (data) => {
      processOutput(data.toString(), ShellEvent.Error, pid);
    });

    _childProcess.on("close", (code) => {
      processOutput(`${code}`, ShellEvent.Exit, pid);
    });
  }

  return pid;
}

/** Basically don't show anything in the console unless there is an error */
function errorIfNotEmpty(response: string) {
  if (response) {
    output.error(response);
  }
}

function processOutput(rawDataStr: string, eventType: ShellEvent, pid: number) {
  // If suspended, queue the output
  if (_wrapperSuspended) {
    _queuedOutput.push({ rawDataStr, eventType, pid });
    return;
  }

  // Strip terminal commands from the output
  let dataStr = stripAnsi(rawDataStr);

  // Ignore output from old shell processes
  if (pid != _currentProcessId) {
    !dataStr.trim() ||
      output.error(
        `Ignoring '${eventType}' from old shell process ${pid}: ` + dataStr
      );
    return;
  }

  // Ignore output from shell processes with no resolve handler
  if (!_resolveCurrentCommand) {
    !dataStr.trim() ||
      output.error(
        `Ignoring '${eventType}' from process ${pid} with no resolve handler: ` +
          dataStr
      );
    return;
  }

  // If start marker detected, start recording the output
  const startDelimiterPos = rawDataStr.indexOf(_startCommandDelimiter);
  if (startDelimiterPos != -1 && rawDataStr[startDelimiterPos - 1] != '"') {
    rawDataStr = rawDataStr.slice(
      startDelimiterPos + _startCommandDelimiter.length
    );
    dataStr = stripAnsi(rawDataStr);

    _outputStarted = true;
  }

  // If not started, end here
  if (!_outputStarted) {
    !dataStr.trim() ||
      output.error(
        `Ignoring '${eventType}' from process ${pid} before command start delimiter: ` +
          dataStr
      );
    return;
  }

  // If exit event
  if (eventType === ShellEvent.Exit) {
    output.error(`SHELL EXIT. PID: ${pid} CODE: ${dataStr}`);

    const msg = `NAISYS: Command killed.`;
    _commandOutput += `n${msg}`;
    _terminal?.writeln("NAISYS: Command killed.");

    const finalOutput = _useTerminal
      ? _getTerminalOutput()
      : _commandOutput.trim();

    resetProcess();

    _completeCommand(finalOutput);
    return;
  }

  const endDelimiterPos = rawDataStr.indexOf(_endCommandDelimiter);
  if (endDelimiterPos != -1 && rawDataStr[endDelimiterPos - 1] != '"') {
    rawDataStr = rawDataStr.slice(0, endDelimiterPos);
    dataStr = stripAnsi(rawDataStr);
  }

  _commandOutput += dataStr;
  _terminal?.write(rawDataStr);

  if (endDelimiterPos != -1) {
    const finalOutput = _useTerminal
      ? _getTerminalOutput()
      : _commandOutput.trim();

    resetCommand();

    _completeCommand(finalOutput);
  }
}

export async function executeCommand(command: string) {
  if (_wrapperSuspended) {
    throw "Use continueCommand to send input to a shell command in process";
  }

  command = command.trim();

  await ensureOpen();

  let commandWithDelimiter: string;
  if (_currentPath && command.split("\n").length > 1) {
    commandWithDelimiter = await putMultilineCommandInAScript(command);
  } else {
    commandWithDelimiter = `echo "${_startCommandDelimiter}"\n${command}\necho "${_endCommandDelimiter}"\n`;
  }

  return new Promise<string>((resolve, reject) => {
    _resolveCurrentCommand = resolve;

    if (!_childProcess && !_ptyProcess) {
      reject("Shell process is not open");
      return;
    }

    _childProcess?.stdin.write(commandWithDelimiter);
    _ptyProcess?.write(commandWithDelimiter);

    // Set timeout to wait for response from command
    setCommandTimeout();
  });
}

/** The LLM made its decision on how it wants to continue with the shell that previously timed out */
export function continueCommand(command: string) {
  if (!_wrapperSuspended) {
    throw "Shell is not suspended, use execute command";
  }

  command = command.trim();

  _wrapperSuspended = false;

  let choice: "wait" | "kill" | "input";

  if (command != "wait" && command != "kill") {
    choice = "input";
  } else {
    choice = command;
  }

  return new Promise<string>((resolve, reject) => {
    _resolveCurrentCommand = resolve;

    // If new output from the shell was queued while waiting for the LLM to decide what to do
    if (_queuedOutput.length > 0) {
      for (const output of _queuedOutput) {
        processOutput(output.rawDataStr, output.eventType, output.pid);
      }
      _queuedOutput.length = 0;

      // If processing queue resolved the command, then we're done
      if (!_resolveCurrentCommand) {
        return;
      }
      // Can't process new input since new output was generated and log would be confusing/out of order
      else if (choice == "input") {
        returnControlToNaisys(false);
        return;
      }
      // Else kill or wait, continue with the LLM's choice
    }

    // LLM wants to wait for more output
    if (choice == "wait") {
      setCommandTimeout();
      return;
    }
    // Else LLM wants to kill the process
    else if (choice == "kill") {
      if (!_currentProcessId) {
        reject("No process to kill");
      } else if (resetShell(_currentProcessId)) {
        return; // Wait for exit event
      } else {
        reject("Unable to kill. Process not found");
      }

      return;
    }
    // Else LLM wants to send input to the process
    else {
      if (!_childProcess && !_ptyProcess) {
        reject("Shell process is not open");
        return;
      }

      _childProcess?.stdin.write(command + "\n");
      _ptyProcess?.write(command + "\n");

      setCommandTimeout();
    }
  });
}

function setCommandTimeout() {
  _currentCommandTimeout = setTimeout(() => {
    returnControlToNaisys(true);
  }, config.shellCommand.timeoutSeconds * 1000);
}

function returnControlToNaisys(timedOut: boolean) {
  _wrapperSuspended = true;
  _queuedOutput.length = 0;

  // Flush the output to the console, and give the LLM instructions of how it might continue
  let finalOutput = _useTerminal ? _getTerminalOutput() : _commandOutput.trim();

  _commandOutput = "";
  _terminal?.clear();

  if (timedOut) {
    finalOutput += `\nNAISYS: Command timed out after ${config.shellCommand.timeoutSeconds} seconds.`;
  } else {
    finalOutput += `\nNAISYS: Unable to send your input as new output was generated in the interm.`;
  }

  _completeCommand(finalOutput);
}

function resetShell(pid: number) {
  const process = _childProcess || _ptyProcess;

  if (!process || process.pid != pid) {
    output.comment("Ignoring timeout for old shell process " + pid);
    return false;
  }

  // There is still an issue here when running on linux where if a command like 'ping' is running
  // then kill() won't actually kill the 'bash' process hosting the ping, it will just hang here indefinitely
  // A not fail proof workaround is to tell the LLM to prefix long running commands with 'timeout 10s' or similar
  const killResponse = process.kill();

  output.error(
    `KILL SIGNAL SENT TO PID: ${process.pid}, RESPONSE: ${killResponse ? "SUCCESS" : "FAILED"}`
  );

  // TODO: Timeout to 'hard close' basically create a new process and ignore the old one

  // Should trigger the process close event from here
  return true;
}

export async function getCurrentPath() {
  // If wrapper suspended just give the last known path
  if (_wrapperSuspended) {
    return _currentPath;
  }

  await ensureOpen();

  _currentPath = await executeCommand("pwd");

  return _currentPath;
}

export async function terminate() {
  /*const exitCode = */ await executeCommand("exit");

  // For some reason showing the exit code clears the console
  resetProcess();
}

function resetCommand() {
  _outputStarted = false;
  _commandOutput = "";
  _terminal?.clear();

  clearTimeout(_currentCommandTimeout);
}

function resetProcess() {
  resetCommand();

  _childProcess?.removeAllListeners();
  _childProcess = undefined;

  _ptyRemoveListeners?.();
  _ptyProcess = undefined;

  _terminal?.dispose();
  _terminal = undefined;
}

/** Wraps multi line commands in a script to make it easier to diagnose the source of errors based on line number
 * May also help with common escaping errors */
function putMultilineCommandInAScript(command: string) {
  const scriptPath = new NaisysPath(
    `${config.naisysFolder}/agent-data/${config.agent.username}/multiline-command.sh`
  );

  pathService.ensureFileDirExists(scriptPath);

  // set -e causes the script to exit on the first error
  const scriptContent = `#!/bin/bash
set -e
echo "${_startCommandDelimiter}"
cd ${_currentPath}
${command.trim()}
echo "${_endCommandDelimiter}"`;

  // create/write file
  fs.writeFileSync(scriptPath.toHostPath(), scriptContent);

  // `Path` is set to the ./bin folder because custom NAISYS commands that follow shell commands will be handled by the shell, which will fail
  // so we need to remind the LLM that 'naisys commands cannot be used with other commands on the same prompt'
  // `source` will run the script in the current shell, so any change directories in the script will persist in the current shell
  return `PATH=${config.binPath}:$PATH source ${scriptPath.getNaisysPath()}`;
}

function _completeCommand(output: string) {
  if (!_resolveCurrentCommand) {
    throw "No command to resolve";
  }

  _resolveCurrentCommand(output);
  _resolveCurrentCommand = undefined;
}

export function isShellSuspended() {
  return _wrapperSuspended;
}

function _getTerminalOutput() {
  let output = "";
  const bufferLineCount = _terminal?.buffer.active?.length || 0;

  for (let i = 0; i < bufferLineCount; i++) {
    output += _terminal?.buffer.active?.getLine(i)?.translateToString() + "\n";
  }

  return output.trim();
}
